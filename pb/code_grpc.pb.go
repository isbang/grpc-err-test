// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CodeSvcClient is the client API for CodeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeSvcClient interface {
	GetErrCode(ctx context.Context, in *GetErrCodeReq, opts ...grpc.CallOption) (*GetErrCodeResp, error)
}

type codeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeSvcClient(cc grpc.ClientConnInterface) CodeSvcClient {
	return &codeSvcClient{cc}
}

func (c *codeSvcClient) GetErrCode(ctx context.Context, in *GetErrCodeReq, opts ...grpc.CallOption) (*GetErrCodeResp, error) {
	out := new(GetErrCodeResp)
	err := c.cc.Invoke(ctx, "/isbang.test.CodeSvc/GetErrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeSvcServer is the server API for CodeSvc service.
// All implementations must embed UnimplementedCodeSvcServer
// for forward compatibility
type CodeSvcServer interface {
	GetErrCode(context.Context, *GetErrCodeReq) (*GetErrCodeResp, error)
	mustEmbedUnimplementedCodeSvcServer()
}

// UnimplementedCodeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCodeSvcServer struct {
}

func (UnimplementedCodeSvcServer) GetErrCode(context.Context, *GetErrCodeReq) (*GetErrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrCode not implemented")
}
func (UnimplementedCodeSvcServer) mustEmbedUnimplementedCodeSvcServer() {}

// UnsafeCodeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeSvcServer will
// result in compilation errors.
type UnsafeCodeSvcServer interface {
	mustEmbedUnimplementedCodeSvcServer()
}

func RegisterCodeSvcServer(s grpc.ServiceRegistrar, srv CodeSvcServer) {
	s.RegisterService(&_CodeSvc_serviceDesc, srv)
}

func _CodeSvc_GetErrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSvcServer).GetErrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isbang.test.CodeSvc/GetErrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSvcServer).GetErrCode(ctx, req.(*GetErrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "isbang.test.CodeSvc",
	HandlerType: (*CodeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrCode",
			Handler:    _CodeSvc_GetErrCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.proto",
}
